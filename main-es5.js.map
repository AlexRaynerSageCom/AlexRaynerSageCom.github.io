{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/components/builder-form/builder-form.component.ts","webpack:///src/app/components/grid-view/grid-view.component.ts","webpack:///src/app/components/index.ts","webpack:///src/app/models/grid.model.ts","webpack:///src/app/models/index.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","grid","updateGrid","selector","template","styleUrls","AppModule","declarations","providers","bootstrap","BuilderFormComponent","fb","gridChanged","showColumnForm","showRowForm","axisUnits","form","group","columnGap","rowGap","fillGrid","columnForm","size","required","unit","rowForm","valueChanges","subscribe","value","newGrid","emit","console","log","field","get","touched","errors","markAllAsTouched","valid","newColumn","columns","reset","newRow","rows","GridViewComponent","gridElem","nativeElement","style","display","styles","cssText","generatedStyles","replace","index","splice","Array","length","Math","max","gridTemplateColumns","map","column","join","gridColumnGap","gridTemplateRows","row","gridRowGap","columnStyles","rowStyles","getStyles","getInitialGrid","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AppComponent } from './app.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AppComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { GridModel, getInitialGrid } from './models';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div>\n      <div class=\"text\">Grid Layout Builder</div>\n      <app-builder-form\n        [grid]=\"grid\"\n        (gridChanged)=\"updateGrid($event)\"\n      >\n      </app-builder-form>\n\n      <app-grid-view [grid]=\"grid\">\n      </app-grid-view>\n    </div>\n  `,\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit{\n  grid: GridModel;\n\n  ngOnInit() {\n    this.grid = getInitialGrid();\n  }\n\n  updateGrid(grid: GridModel) {\n    this.grid = grid;\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule, FormsModule} from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BuilderFormComponent, GridViewComponent } from './components';\n\nimport { ButtonModule as CarbonButtonModule } from '@sage/ng-carbon/button';\nimport { DropdownModule as CarbonDropdownModule } from '@sage/ng-carbon/dropdown';\nimport { InputTextModule as CarbonInputTextModule } from '@sage/ng-carbon/input-text';\nimport { CheckboxModule as CarbonCheckboxModule } from '@sage/ng-carbon/checkbox';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    CommonModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CarbonButtonModule,\n    CarbonDropdownModule,\n    CarbonInputTextModule,\n    CarbonCheckboxModule\n  ],\n  declarations: [\n    AppComponent,\n    BuilderFormComponent,\n    GridViewComponent\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, Output, EventEmitter, Input, OnInit } from '@angular/core';\r\nimport { GridModel } from '../../models';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-builder-form',\r\n  template: `\r\n    <form class=\"builder-form\" [formGroup]=\"form\">\r\n      <sds-button\r\n        type=\"button\"\r\n        (clickEvent)=\"showColumnForm = true\"\r\n      >\r\n        Add Column\r\n      </sds-button>\r\n\r\n      <sds-button\r\n        type=\"button\"\r\n        (clickEvent)=\"showRowForm = true\"\r\n      >\r\n        Add Row\r\n      </sds-button>\r\n\r\n      <div class=\"input-field\">\r\n        <label>\r\n          Column Gap (px):\r\n          <input type=\"number\" min=\"0\" formControlName=\"columnGap\"/>\r\n        </label>\r\n      </div>\r\n\r\n      <div class=\"input-field\">\r\n        <label>\r\n          Row Gap (px):\r\n          <input type=\"number\" min=\"0\" formControlName=\"rowGap\"/>\r\n        </label>\r\n      </div>\r\n\r\n      <sds-checkbox\r\n        formControlName=\"fillGrid\"\r\n        size=\"large\"\r\n      >\r\n        Fill grid?\r\n      </sds-checkbox>\r\n    </form>\r\n\r\n    <form\r\n      *ngIf=\"showColumnForm\"\r\n      [formGroup]=\"columnForm\"\r\n      (ngSubmit)=\"addColumn()\"\r\n    >\r\n      <div class=\"input-field\">\r\n        <label>\r\n          New Column:\r\n          <sds-input-text\r\n            formControlName=\"size\"\r\n            placeholderText=\"size..\"\r\n            errorType=\"error\"\r\n            [errors]=\"isFieldInvalid(columnForm, 'size')\"\r\n          >\r\n          </sds-input-text>\r\n          <sds-dropdown\r\n            formControlName=\"unit\"\r\n            placeholder=\"unit..\"\r\n            errorType=\"error\"\r\n            [errors]=\"isFieldInvalid(columnForm, 'unit')\"\r\n          >\r\n            <sds-dropdown-option\r\n              *ngFor=\"let option of axisUnits\"\r\n              [value]=\"option\"\r\n            >\r\n              {{ option }}\r\n            </sds-dropdown-option>\r\n          </sds-dropdown>\r\n        </label>\r\n      </div>\r\n\r\n      <sds-button type=\"submit\">Add</sds-button>\r\n    </form>\r\n\r\n    <form\r\n      *ngIf=\"showRowForm\"\r\n      [formGroup]=\"rowForm\"\r\n      (ngSubmit)=\"addRow()\"\r\n    >\r\n      <div class=\"input-field\">\r\n        <label>\r\n          New Row:\r\n          <sds-input-text\r\n            formControlName=\"size\"\r\n            placeholderText=\"size..\"\r\n            errorType=\"error\"\r\n            [errors]=\"isFieldInvalid(rowForm, 'size')\"\r\n          >\r\n          </sds-input-text>\r\n          <sds-dropdown\r\n            formControlName=\"unit\"\r\n            placeholder=\"unit..\"\r\n            errorType=\"error\"\r\n            [errors]=\"isFieldInvalid(rowForm, 'unit')\"\r\n          >\r\n            <sds-dropdown-option\r\n              *ngFor=\"let option of axisUnits\"\r\n              [value]=\"option\"\r\n            >\r\n              {{ option }}\r\n            </sds-dropdown-option>\r\n          </sds-dropdown>\r\n        </label>\r\n      </div>\r\n\r\n      <sds-button type=\"submit\">Add</sds-button>\r\n    </form>\r\n  `,\r\n  styleUrls: ['./builder-form.component.scss']\r\n})\r\nexport class BuilderFormComponent implements OnInit {\r\n  @Input() grid: GridModel;\r\n\r\n  @Output()\r\n  gridChanged: EventEmitter<GridModel> = new EventEmitter<GridModel>();\r\n\r\n  form: FormGroup;\r\n  showColumnForm = false;\r\n  columnForm: FormGroup;\r\n  showRowForm = false;\r\n  rowForm: FormGroup;\r\n\r\n  axisUnits = [\r\n    'fr',\r\n    '%',\r\n    'px',\r\n    'auto'\r\n  ];\r\n\r\n  constructor(private fb: FormBuilder) {}\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      columnGap: this.grid.columnGap,\r\n      rowGap: this.grid.rowGap,\r\n      fillGrid: this.grid.fillGrid\r\n    });\r\n\r\n    this.columnForm = this.fb.group({\r\n      size: ['', Validators.required],\r\n      unit: [null, Validators.required]\r\n    });\r\n\r\n    this.rowForm = this.fb.group({\r\n      size: ['', Validators.required],\r\n      unit: [null, Validators.required]\r\n    });\r\n\r\n    this.form.valueChanges.subscribe(value => {\r\n      const newGrid = { ...this.grid, ...value };\r\n      this.gridChanged.emit(newGrid);\r\n      console.log(newGrid);\r\n    });\r\n  }\r\n\r\n  isFieldInvalid(form: FormGroup, field: string): string {\r\n    return form.get(field).touched && form.get(field).errors\r\n      ? 'This field is required.'\r\n      : null;\r\n  }\r\n\r\n  addColumn() {\r\n    this.columnForm.markAllAsTouched();\r\n\r\n    if (!this.columnForm.valid) {\r\n      return;\r\n    }\r\n\r\n    const newColumn = {\r\n      size: this.columnForm.get('size').value,\r\n      unit: this.columnForm.get('unit').value\r\n    };\r\n\r\n    const newGrid = {\r\n      ...this.grid,\r\n      ...{\r\n        columns: [\r\n          ...this.grid.columns,\r\n          newColumn\r\n        ]\r\n      }\r\n    };\r\n\r\n    this.gridChanged.emit(newGrid);\r\n    this.columnForm.reset();\r\n    this.showColumnForm = false;\r\n  }\r\n\r\n  addRow() {\r\n    this.rowForm.markAllAsTouched();\r\n\r\n    if (!this.rowForm.valid) {\r\n      return;\r\n    }\r\n\r\n    const newRow = {\r\n      size: this.rowForm.get('size').value,\r\n      unit: this.rowForm.get('unit').value\r\n    };\r\n\r\n    const newGrid = {\r\n      ...this.grid,\r\n      ...{\r\n        rows: [\r\n          ...this.grid.rows,\r\n          newRow\r\n        ]\r\n      }\r\n    };\r\n\r\n    this.gridChanged.emit(newGrid);\r\n    this.rowForm.reset();\r\n    this.showRowForm = false;\r\n  }\r\n}\r\n","import { Component, ViewChild, ElementRef, Input, AfterViewInit } from '@angular/core';\r\nimport { GridModel } from '../../models';\r\n\r\n@Component({\r\n  selector: 'app-grid-view',\r\n  template: `\r\n    <sds-button (clickEvent)=\"getStyles()\">\r\n      Get Styles\r\n    </sds-button>\r\n\r\n    <pre\r\n      *ngIf=\"generatedStyles\"\r\n      class=\"output-styles\"\r\n    >\r\n.grid &#123;\r\n    {{ generatedStyles }}\r\n&#125;\r\n</pre>\r\n\r\n    <div class=\"grid-view\">\r\n\r\n      <div\r\n        *ngIf=\"grid.columns.length > 0\"\r\n        class=\"columns\"\r\n        [style]=\"columnStyles\"\r\n      >\r\n        <div\r\n          *ngFor=\"let col of columnCount; let i = index\"\r\n          tabIndex=\"0\"\r\n          (click)=\"removeColumn(i)\"\r\n        >\r\n          DELETE\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        *ngIf=\"grid.rows.length > 0\"\r\n        class=\"rows\"\r\n        [style]=\"rowStyles\"\r\n      >\r\n        <div\r\n          *ngFor=\"let row of rowCount; let i = index\"\r\n          tabIndex=\"0\"\r\n          (click)=\"removeRow(i)\"\r\n        >\r\n          DELETE\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        #gridElem\r\n        class=\"grid\"\r\n        [style]=\"styles\"\r\n      >\r\n        <ng-container *ngIf=\"grid?.fillGrid\">\r\n          <div\r\n            *ngFor=\"let item of count\"\r\n            class=\"grid__item\"\r\n          >ITEM</div>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./grid-view.component.scss']\r\n})\r\nexport class GridViewComponent implements AfterViewInit {\r\n  @ViewChild('gridElem') gridElem: ElementRef;\r\n\r\n  @Input() grid: GridModel;\r\n\r\n  generatedStyles: string;\r\n\r\n  ngAfterViewInit() {\r\n    this.gridElem.nativeElement.style.display = 'grid';\r\n  }\r\n\r\n  getStyles() {\r\n    const styles = this.gridElem.nativeElement.style.cssText;\r\n\r\n    this.generatedStyles = styles.replace(/; /g, ';\\n    ');\r\n  }\r\n\r\n  removeColumn(index: number) {\r\n    this.grid.columns.splice(index, 1);\r\n  }\r\n\r\n  removeRow(index: number) {\r\n    this.grid.rows.splice(index, 1);\r\n  }\r\n\r\n  get columnCount() {\r\n    return new Array(this.grid.columns.length);\r\n  }\r\n\r\n  get rowCount() {\r\n    return new Array(this.grid.rows.length);\r\n  }\r\n\r\n  get count() {\r\n    return new Array(this.grid.columns.length * Math.max(1, this.grid.rows.length));\r\n  }\r\n\r\n  get columnStyles() {\r\n    return {\r\n      gridTemplateColumns: this.grid.columns.map(column => `${column.size}${column.unit}`).join(' '),\r\n      gridColumnGap: this.grid.columnGap + 'px'\r\n    };\r\n  }\r\n\r\n  get rowStyles() {\r\n    return {\r\n      gridTemplateRows: this.grid.rows.map(row => `${row.size}${row.unit}`).join(' '),\r\n      gridRowGap: this.grid.rowGap + 'px'\r\n    };\r\n  }\r\n\r\n  get styles() {\r\n    return {\r\n      ...this.columnStyles,\r\n      ...this.rowStyles\r\n    };\r\n  }\r\n}\r\n","export * from './builder-form/builder-form.component';\r\nexport * from './grid-view/grid-view.component';\r\n","import { AxisModel } from './axis.model';\r\n\r\nexport interface GridModel {\r\n  columns: AxisModel[];\r\n  rows: AxisModel[];\r\n  columnGap: number;\r\n  rowGap: number;\r\n  fillGrid: boolean;\r\n}\r\n\r\nexport const getInitialGrid = (): GridModel => {\r\n  return {\r\n    columns: [{ size: '1', unit: 'fr' }, { size: '1', unit: 'fr' }],\r\n    rows: [{ size: '1', unit: 'fr' }, { size: '1', unit: 'fr' }],\r\n    columnGap: 10,\r\n    rowGap: 10,\r\n    fillGrid: true\r\n  };\r\n};\r\n","export * from './axis.model';\r\nexport * from './grid.model';\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}